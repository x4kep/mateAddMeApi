paths:
  '/Users/{id}/accessTokens/{fk}':
    get:
      tags:
        - User
      summary: Find a related item by id for accessTokens.
      operationId: User.prototype.__findById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - User
      summary: Delete a related item by id for accessTokens.
      operationId: User.prototype.__destroyById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - User
      summary: Update a related item by id for accessTokens.
      operationId: User.prototype.__updateById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
  '/Users/{id}/accessTokens':
    get:
      tags:
        - User
      summary: Queries accessTokens of User.
      operationId: User.prototype.__get__accessTokens
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessToken'
      deprecated: false
    post:
      tags:
        - User
      summary: Creates a new instance in accessTokens of this model.
      operationId: User.prototype.__create__accessTokens
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - User
      summary: Deletes all accessTokens of this model.
      operationId: User.prototype.__delete__accessTokens
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Users/{id}/accessTokens/count':
    get:
      tags:
        - User
      summary: Counts accessTokens of User.
      operationId: User.prototype.__count__accessTokens
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Users:
    post:
      tags:
        - User
      summary: Create a new instance of the model and persist it into the data source.
      operationId: User.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    patch:
      tags:
        - User
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: User.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    put:
      tags:
        - User
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: User.replaceOrCreate__put_Users
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    get:
      tags:
        - User
      summary: Find all instances of the model matched by filter from the data source.
      operationId: User.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      deprecated: false
  /Users/replaceOrCreate:
    post:
      tags:
        - User
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: User.replaceOrCreate__post_Users_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  /Users/upsertWithWhere:
    post:
      tags:
        - User
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: User.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  '/Users/{id}/exists':
    get:
      tags:
        - User
      summary: Check whether a model instance exists in the data source.
      operationId: 'User.exists__get_Users_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Users/{id}':
    head:
      tags:
        - User
      summary: Check whether a model instance exists in the data source.
      operationId: 'User.exists__head_Users_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - User
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: User.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    put:
      tags:
        - User
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'User.replaceById__put_Users_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    delete:
      tags:
        - User
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: User.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - User
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: User.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/User'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  '/Users/{id}/replace':
    post:
      tags:
        - User
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'User.replaceById__post_Users_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  /Users/findOne:
    get:
      tags:
        - User
      summary: Find first instance of the model matched by filter from the data source.
      operationId: User.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  /Users/update:
    post:
      tags:
        - User
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: User.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Users/count:
    get:
      tags:
        - User
      summary: Count instances of the model matched by where from the data source.
      operationId: User.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Users/login:
    post:
      tags:
        - User
      summary: Login a user with username/email and password.
      operationId: User.login
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            type: object
        - name: include
          in: query
          description: Related objects to include in the response. See the description of return value for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            description: >+
              The response body contains properties of the AccessToken created on
              login.

              Depending on the value of `include` parameter, the body may contain
              additional properties:







                - `user` - `U+007BUserU+007D` - Data of the currently logged in

              user. (`include=user`)


            type: object
      deprecated: false
  /Users/logout:
    post:
      tags:
        - User
      summary: Logout a user with access token.
      operationId: User.logout
      parameters: []
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Users/{id}/verify':
    post:
      tags:
        - User
      summary: "Trigger user's identity verification with configured verifyOptions"
      operationId: User.prototype.verify
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Users/confirm:
    get:
      tags:
        - User
      summary: Confirm a user registration with identity verification token.
      operationId: User.confirm
      parameters:
        - name: uid
          in: query
          required: true
          type: string
        - name: token
          in: query
          required: true
          type: string
        - name: redirect
          in: query
          required: false
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Users/reset:
    post:
      tags:
        - User
      summary: Reset password for a user with email.
      operationId: User.resetPassword
      parameters:
        - name: options
          in: body
          required: true
          schema:
            type: object
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Users/change-password:
    post:
      tags:
        - User
      summary: "Change a user's password."
      operationId: User.changePassword
      parameters:
        - name: oldPassword
          in: formData
          required: true
          type: string
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Users/reset-password:
    post:
      tags:
        - User
      summary: "Reset user's password via a password-reset token."
      operationId: User.setPassword
      parameters:
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Players/{id}/accessTokens/{fk}':
    get:
      tags:
        - Player
      summary: Find a related item by id for accessTokens.
      operationId: Player.prototype.__findById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Player id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - Player
      summary: Delete a related item by id for accessTokens.
      operationId: Player.prototype.__destroyById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Player id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Player
      summary: Update a related item by id for accessTokens.
      operationId: Player.prototype.__updateById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: Player id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
  '/Players/{id}/language':
    get:
      tags:
        - Player
      summary: Fetches belongsTo relation language.
      operationId: Player.prototype.__get__language
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: Player id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Language'
      deprecated: false
  '/Players/{id}/country':
    get:
      tags:
        - Player
      summary: Fetches belongsTo relation country.
      operationId: Player.prototype.__get__country
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: Player id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Country'
      deprecated: false
  '/Players/{id}/gameProfiles/{fk}':
    get:
      tags:
        - Player
      summary: Find a related item by id for gameProfiles.
      operationId: Player.prototype.__findById__gameProfiles
      parameters:
        - name: fk
          in: path
          description: Foreign key for gameProfiles
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Player id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfile'
      deprecated: false
    delete:
      tags:
        - Player
      summary: Delete a related item by id for gameProfiles.
      operationId: Player.prototype.__destroyById__gameProfiles
      parameters:
        - name: fk
          in: path
          description: Foreign key for gameProfiles
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Player id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Player
      summary: Update a related item by id for gameProfiles.
      operationId: Player.prototype.__updateById__gameProfiles
      parameters:
        - name: fk
          in: path
          description: Foreign key for gameProfiles
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/GameProfile'
        - name: id
          in: path
          description: Player id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfile'
      deprecated: false
  '/Players/{id}/languages/{fk}':
    get:
      tags:
        - Player
      summary: Find a related item by id for languages.
      operationId: Player.prototype.__findById__languages
      parameters:
        - name: fk
          in: path
          description: Foreign key for languages
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Player id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PlayerLanguage'
      deprecated: false
    delete:
      tags:
        - Player
      summary: Delete a related item by id for languages.
      operationId: Player.prototype.__destroyById__languages
      parameters:
        - name: fk
          in: path
          description: Foreign key for languages
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Player id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Player
      summary: Update a related item by id for languages.
      operationId: Player.prototype.__updateById__languages
      parameters:
        - name: fk
          in: path
          description: Foreign key for languages
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/PlayerLanguage'
        - name: id
          in: path
          description: Player id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PlayerLanguage'
      deprecated: false
  '/Players/{id}/accessTokens':
    get:
      tags:
        - Player
      summary: Queries accessTokens of Player.
      operationId: Player.prototype.__get__accessTokens
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Player id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessToken'
      deprecated: false
    post:
      tags:
        - Player
      summary: Creates a new instance in accessTokens of this model.
      operationId: Player.prototype.__create__accessTokens
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: Player id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - Player
      summary: Deletes all accessTokens of this model.
      operationId: Player.prototype.__delete__accessTokens
      parameters:
        - name: id
          in: path
          description: Player id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Players/{id}/accessTokens/count':
    get:
      tags:
        - Player
      summary: Counts accessTokens of Player.
      operationId: Player.prototype.__count__accessTokens
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Player id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/Players/{id}/gameProfiles':
    get:
      tags:
        - Player
      summary: Queries gameProfiles of Player.
      operationId: Player.prototype.__get__gameProfiles
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Player id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/GameProfile'
      deprecated: false
    post:
      tags:
        - Player
      summary: Creates a new instance in gameProfiles of this model.
      operationId: Player.prototype.__create__gameProfiles
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/GameProfile'
        - name: id
          in: path
          description: Player id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfile'
      deprecated: false
    delete:
      tags:
        - Player
      summary: Deletes all gameProfiles of this model.
      operationId: Player.prototype.__delete__gameProfiles
      parameters:
        - name: id
          in: path
          description: Player id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Players/{id}/gameProfiles/count':
    get:
      tags:
        - Player
      summary: Counts gameProfiles of Player.
      operationId: Player.prototype.__count__gameProfiles
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Player id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/Players/{id}/languages':
    get:
      tags:
        - Player
      summary: Queries languages of Player.
      operationId: Player.prototype.__get__languages
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Player id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/PlayerLanguage'
      deprecated: false
    post:
      tags:
        - Player
      summary: Creates a new instance in languages of this model.
      operationId: Player.prototype.__create__languages
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/PlayerLanguage'
        - name: id
          in: path
          description: Player id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PlayerLanguage'
      deprecated: false
    delete:
      tags:
        - Player
      summary: Deletes all languages of this model.
      operationId: Player.prototype.__delete__languages
      parameters:
        - name: id
          in: path
          description: Player id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Players/{id}/languages/count':
    get:
      tags:
        - Player
      summary: Counts languages of Player.
      operationId: Player.prototype.__count__languages
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Player id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Players:
    post:
      tags:
        - Player
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Player.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Player'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Player'
      deprecated: false
    patch:
      tags:
        - Player
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Player.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Player'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Player'
      deprecated: false
    put:
      tags:
        - Player
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Player.replaceOrCreate__put_Players
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Player'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Player'
      deprecated: false
    get:
      tags:
        - Player
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Player.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Player'
      deprecated: false
  /Players/replaceOrCreate:
    post:
      tags:
        - Player
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Player.replaceOrCreate__post_Players_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Player'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Player'
      deprecated: false
  /Players/upsertWithWhere:
    post:
      tags:
        - Player
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Player.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Player'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Player'
      deprecated: false
  '/Players/{id}/exists':
    get:
      tags:
        - Player
      summary: Check whether a model instance exists in the data source.
      operationId: 'Player.exists__get_Players_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Players/{id}':
    head:
      tags:
        - Player
      summary: Check whether a model instance exists in the data source.
      operationId: 'Player.exists__head_Players_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Player
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Player.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Player'
      deprecated: false
    put:
      tags:
        - Player
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Player.replaceById__put_Players_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Player'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Player'
      deprecated: false
    delete:
      tags:
        - Player
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Player.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Player
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: Player.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Player'
        - name: id
          in: path
          description: Player id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Player'
      deprecated: false
  '/Players/{id}/replace':
    post:
      tags:
        - Player
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Player.replaceById__post_Players_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Player'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Player'
      deprecated: false
  /Players/findOne:
    get:
      tags:
        - Player
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Player.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Player'
      deprecated: false
  /Players/update:
    post:
      tags:
        - Player
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Player.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Player'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Players/count:
    get:
      tags:
        - Player
      summary: Count instances of the model matched by where from the data source.
      operationId: Player.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Players/login:
    post:
      tags:
        - Player
      summary: Login a user with username/email and password.
      operationId: Player.login
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            type: object
        - name: include
          in: query
          description: Related objects to include in the response. See the description of return value for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            description: >+
              The response body contains properties of the AccessToken created on
              login.

              Depending on the value of `include` parameter, the body may contain
              additional properties:







                - `user` - `U+007BUserU+007D` - Data of the currently logged in

              user. (`include=user`)


            type: object
      deprecated: false
  /Players/logout:
    post:
      tags:
        - Player
      summary: Logout a user with access token.
      operationId: Player.logout
      parameters: []
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Players/{id}/verify':
    post:
      tags:
        - Player
      summary: "Trigger user's identity verification with configured verifyOptions"
      operationId: Player.prototype.verify
      parameters:
        - name: id
          in: path
          description: Player id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Players/confirm:
    get:
      tags:
        - Player
      summary: Confirm a user registration with identity verification token.
      operationId: Player.confirm
      parameters:
        - name: uid
          in: query
          required: true
          type: string
        - name: token
          in: query
          required: true
          type: string
        - name: redirect
          in: query
          required: false
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Players/reset:
    post:
      tags:
        - Player
      summary: Reset password for a user with email.
      operationId: Player.resetPassword
      parameters:
        - name: options
          in: body
          required: true
          schema:
            type: object
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Players/change-password:
    post:
      tags:
        - Player
      summary: "Change a user's password."
      operationId: Player.changePassword
      parameters:
        - name: oldPassword
          in: formData
          required: true
          type: string
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Players/reset-password:
    post:
      tags:
        - Player
      summary: "Reset user's password via a password-reset token."
      operationId: Player.setPassword
      parameters:
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Players/updateBasicProfile:
    post:
      tags:
        - Player
      summary: Filter GameProfile Test
      operationId: Player.updateBasicProfile
      parameters:
        - name: params
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              data:
                type: string
      deprecated: false
  /Players/sveIgrac:
    get:
      tags:
        - Player
      summary: Get list of products by category
      operationId: Player.sveIgrac
      parameters:
        - name: category
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Player'
      deprecated: false
  '/Languages/{id}/players/{fk}':
    get:
      tags:
        - Language
      summary: Find a related item by id for players.
      operationId: Language.prototype.__findById__players
      parameters:
        - name: fk
          in: path
          description: Foreign key for players
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Language id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Player'
      deprecated: false
    delete:
      tags:
        - Language
      summary: Delete a related item by id for players.
      operationId: Language.prototype.__destroyById__players
      parameters:
        - name: fk
          in: path
          description: Foreign key for players
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Language id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Language
      summary: Update a related item by id for players.
      operationId: Language.prototype.__updateById__players
      parameters:
        - name: fk
          in: path
          description: Foreign key for players
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Player'
        - name: id
          in: path
          description: Language id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Player'
      deprecated: false
  '/Languages/{id}/players':
    get:
      tags:
        - Language
      summary: Queries players of Language.
      operationId: Language.prototype.__get__players
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Language id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Player'
      deprecated: false
    post:
      tags:
        - Language
      summary: Creates a new instance in players of this model.
      operationId: Language.prototype.__create__players
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Player'
        - name: id
          in: path
          description: Language id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Player'
      deprecated: false
    delete:
      tags:
        - Language
      summary: Deletes all players of this model.
      operationId: Language.prototype.__delete__players
      parameters:
        - name: id
          in: path
          description: Language id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Languages/{id}/players/count':
    get:
      tags:
        - Language
      summary: Counts players of Language.
      operationId: Language.prototype.__count__players
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Language id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Languages:
    post:
      tags:
        - Language
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Language.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Language'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Language'
      deprecated: false
    patch:
      tags:
        - Language
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Language.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Language'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Language'
      deprecated: false
    put:
      tags:
        - Language
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Language.replaceOrCreate__put_Languages
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Language'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Language'
      deprecated: false
    get:
      tags:
        - Language
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Language.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Language'
      deprecated: false
  /Languages/replaceOrCreate:
    post:
      tags:
        - Language
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Language.replaceOrCreate__post_Languages_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Language'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Language'
      deprecated: false
  /Languages/upsertWithWhere:
    post:
      tags:
        - Language
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Language.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Language'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Language'
      deprecated: false
  '/Languages/{id}/exists':
    get:
      tags:
        - Language
      summary: Check whether a model instance exists in the data source.
      operationId: 'Language.exists__get_Languages_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Languages/{id}':
    head:
      tags:
        - Language
      summary: Check whether a model instance exists in the data source.
      operationId: 'Language.exists__head_Languages_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Language
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Language.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Language'
      deprecated: false
    put:
      tags:
        - Language
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Language.replaceById__put_Languages_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Language'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Language'
      deprecated: false
    delete:
      tags:
        - Language
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Language.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Language
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: Language.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Language'
        - name: id
          in: path
          description: Language id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Language'
      deprecated: false
  '/Languages/{id}/replace':
    post:
      tags:
        - Language
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Language.replaceById__post_Languages_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Language'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Language'
      deprecated: false
  /Languages/findOne:
    get:
      tags:
        - Language
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Language.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Language'
      deprecated: false
  /Languages/update:
    post:
      tags:
        - Language
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Language.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Language'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Languages/count:
    get:
      tags:
        - Language
      summary: Count instances of the model matched by where from the data source.
      operationId: Language.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/Games/{id}/gameRoles/{fk}':
    get:
      tags:
        - Game
      summary: Find a related item by id for gameRoles.
      operationId: Game.prototype.__findById__gameRoles
      parameters:
        - name: fk
          in: path
          description: Foreign key for gameRoles
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameRole'
      deprecated: false
    delete:
      tags:
        - Game
      summary: Delete a related item by id for gameRoles.
      operationId: Game.prototype.__destroyById__gameRoles
      parameters:
        - name: fk
          in: path
          description: Foreign key for gameRoles
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Game
      summary: Update a related item by id for gameRoles.
      operationId: Game.prototype.__updateById__gameRoles
      parameters:
        - name: fk
          in: path
          description: Foreign key for gameRoles
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/GameRole'
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameRole'
      deprecated: false
  '/Games/{id}/gameRanks/{fk}':
    get:
      tags:
        - Game
      summary: Find a related item by id for gameRanks.
      operationId: Game.prototype.__findById__gameRanks
      parameters:
        - name: fk
          in: path
          description: Foreign key for gameRanks
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameRank'
      deprecated: false
    delete:
      tags:
        - Game
      summary: Delete a related item by id for gameRanks.
      operationId: Game.prototype.__destroyById__gameRanks
      parameters:
        - name: fk
          in: path
          description: Foreign key for gameRanks
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Game
      summary: Update a related item by id for gameRanks.
      operationId: Game.prototype.__updateById__gameRanks
      parameters:
        - name: fk
          in: path
          description: Foreign key for gameRanks
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/GameRank'
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameRank'
      deprecated: false
  '/Games/{id}/gameModes/{fk}':
    get:
      tags:
        - Game
      summary: Find a related item by id for gameModes.
      operationId: Game.prototype.__findById__gameModes
      parameters:
        - name: fk
          in: path
          description: Foreign key for gameModes
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameMode'
      deprecated: false
    delete:
      tags:
        - Game
      summary: Delete a related item by id for gameModes.
      operationId: Game.prototype.__destroyById__gameModes
      parameters:
        - name: fk
          in: path
          description: Foreign key for gameModes
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Game
      summary: Update a related item by id for gameModes.
      operationId: Game.prototype.__updateById__gameModes
      parameters:
        - name: fk
          in: path
          description: Foreign key for gameModes
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/GameMode'
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameMode'
      deprecated: false
  '/Games/{id}/gameRegions/{fk}':
    get:
      tags:
        - Game
      summary: Find a related item by id for gameRegions.
      operationId: Game.prototype.__findById__gameRegions
      parameters:
        - name: fk
          in: path
          description: Foreign key for gameRegions
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameRegion'
      deprecated: false
    delete:
      tags:
        - Game
      summary: Delete a related item by id for gameRegions.
      operationId: Game.prototype.__destroyById__gameRegions
      parameters:
        - name: fk
          in: path
          description: Foreign key for gameRegions
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Game
      summary: Update a related item by id for gameRegions.
      operationId: Game.prototype.__updateById__gameRegions
      parameters:
        - name: fk
          in: path
          description: Foreign key for gameRegions
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/GameRegion'
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameRegion'
      deprecated: false
  '/Games/{id}/gameRoles':
    get:
      tags:
        - Game
      summary: Queries gameRoles of Game.
      operationId: Game.prototype.__get__gameRoles
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/GameRole'
      deprecated: false
    post:
      tags:
        - Game
      summary: Creates a new instance in gameRoles of this model.
      operationId: Game.prototype.__create__gameRoles
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/GameRole'
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameRole'
      deprecated: false
    delete:
      tags:
        - Game
      summary: Deletes all gameRoles of this model.
      operationId: Game.prototype.__delete__gameRoles
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Games/{id}/gameRoles/count':
    get:
      tags:
        - Game
      summary: Counts gameRoles of Game.
      operationId: Game.prototype.__count__gameRoles
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/Games/{id}/gameRanks':
    get:
      tags:
        - Game
      summary: Queries gameRanks of Game.
      operationId: Game.prototype.__get__gameRanks
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/GameRank'
      deprecated: false
    post:
      tags:
        - Game
      summary: Creates a new instance in gameRanks of this model.
      operationId: Game.prototype.__create__gameRanks
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/GameRank'
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameRank'
      deprecated: false
    delete:
      tags:
        - Game
      summary: Deletes all gameRanks of this model.
      operationId: Game.prototype.__delete__gameRanks
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Games/{id}/gameRanks/count':
    get:
      tags:
        - Game
      summary: Counts gameRanks of Game.
      operationId: Game.prototype.__count__gameRanks
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/Games/{id}/gameModes':
    get:
      tags:
        - Game
      summary: Queries gameModes of Game.
      operationId: Game.prototype.__get__gameModes
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/GameMode'
      deprecated: false
    post:
      tags:
        - Game
      summary: Creates a new instance in gameModes of this model.
      operationId: Game.prototype.__create__gameModes
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/GameMode'
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameMode'
      deprecated: false
    delete:
      tags:
        - Game
      summary: Deletes all gameModes of this model.
      operationId: Game.prototype.__delete__gameModes
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Games/{id}/gameModes/count':
    get:
      tags:
        - Game
      summary: Counts gameModes of Game.
      operationId: Game.prototype.__count__gameModes
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/Games/{id}/gameRegions':
    get:
      tags:
        - Game
      summary: Queries gameRegions of Game.
      operationId: Game.prototype.__get__gameRegions
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/GameRegion'
      deprecated: false
    post:
      tags:
        - Game
      summary: Creates a new instance in gameRegions of this model.
      operationId: Game.prototype.__create__gameRegions
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/GameRegion'
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameRegion'
      deprecated: false
    delete:
      tags:
        - Game
      summary: Deletes all gameRegions of this model.
      operationId: Game.prototype.__delete__gameRegions
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Games/{id}/gameRegions/count':
    get:
      tags:
        - Game
      summary: Counts gameRegions of Game.
      operationId: Game.prototype.__count__gameRegions
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Games:
    post:
      tags:
        - Game
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Game.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Game'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Game'
      deprecated: false
    patch:
      tags:
        - Game
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Game.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Game'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Game'
      deprecated: false
    put:
      tags:
        - Game
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Game.replaceOrCreate__put_Games
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Game'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Game'
      deprecated: false
    get:
      tags:
        - Game
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Game.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Game'
      deprecated: false
  /Games/replaceOrCreate:
    post:
      tags:
        - Game
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Game.replaceOrCreate__post_Games_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Game'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Game'
      deprecated: false
  /Games/upsertWithWhere:
    post:
      tags:
        - Game
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Game.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Game'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Game'
      deprecated: false
  '/Games/{id}/exists':
    get:
      tags:
        - Game
      summary: Check whether a model instance exists in the data source.
      operationId: 'Game.exists__get_Games_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Games/{id}':
    head:
      tags:
        - Game
      summary: Check whether a model instance exists in the data source.
      operationId: 'Game.exists__head_Games_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Game
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Game.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Game'
      deprecated: false
    put:
      tags:
        - Game
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Game.replaceById__put_Games_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Game'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Game'
      deprecated: false
    delete:
      tags:
        - Game
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Game.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Game
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: Game.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Game'
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Game'
      deprecated: false
  '/Games/{id}/replace':
    post:
      tags:
        - Game
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Game.replaceById__post_Games_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Game'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Game'
      deprecated: false
  /Games/findOne:
    get:
      tags:
        - Game
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Game.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Game'
      deprecated: false
  /Games/update:
    post:
      tags:
        - Game
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Game.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Game'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Games/count:
    get:
      tags:
        - Game
      summary: Count instances of the model matched by where from the data source.
      operationId: Game.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Countries:
    post:
      tags:
        - Country
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Country.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Country'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Country'
      deprecated: false
    patch:
      tags:
        - Country
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Country.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Country'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Country'
      deprecated: false
    put:
      tags:
        - Country
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Country.replaceOrCreate__put_Countries
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Country'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Country'
      deprecated: false
    get:
      tags:
        - Country
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Country.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Country'
      deprecated: false
  /Countries/replaceOrCreate:
    post:
      tags:
        - Country
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Country.replaceOrCreate__post_Countries_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Country'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Country'
      deprecated: false
  /Countries/upsertWithWhere:
    post:
      tags:
        - Country
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Country.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Country'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Country'
      deprecated: false
  '/Countries/{id}/exists':
    get:
      tags:
        - Country
      summary: Check whether a model instance exists in the data source.
      operationId: 'Country.exists__get_Countries_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Countries/{id}':
    head:
      tags:
        - Country
      summary: Check whether a model instance exists in the data source.
      operationId: 'Country.exists__head_Countries_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Country
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Country.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Country'
      deprecated: false
    put:
      tags:
        - Country
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Country.replaceById__put_Countries_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Country'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Country'
      deprecated: false
    delete:
      tags:
        - Country
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Country.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Country
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: Country.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Country'
        - name: id
          in: path
          description: Country id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Country'
      deprecated: false
  '/Countries/{id}/replace':
    post:
      tags:
        - Country
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Country.replaceById__post_Countries_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Country'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Country'
      deprecated: false
  /Countries/findOne:
    get:
      tags:
        - Country
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Country.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Country'
      deprecated: false
  /Countries/update:
    post:
      tags:
        - Country
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Country.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Country'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Countries/count:
    get:
      tags:
        - Country
      summary: Count instances of the model matched by where from the data source.
      operationId: Country.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/GameRoles/{id}/gameProfiles/{fk}':
    get:
      tags:
        - GameRole
      summary: Find a related item by id for gameProfiles.
      operationId: GameRole.prototype.__findById__gameProfiles
      parameters:
        - name: fk
          in: path
          description: Foreign key for gameProfiles
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: GameRole id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfile'
      deprecated: false
    delete:
      tags:
        - GameRole
      summary: Delete a related item by id for gameProfiles.
      operationId: GameRole.prototype.__destroyById__gameProfiles
      parameters:
        - name: fk
          in: path
          description: Foreign key for gameProfiles
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: GameRole id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - GameRole
      summary: Update a related item by id for gameProfiles.
      operationId: GameRole.prototype.__updateById__gameProfiles
      parameters:
        - name: fk
          in: path
          description: Foreign key for gameProfiles
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/GameProfile'
        - name: id
          in: path
          description: GameRole id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfile'
      deprecated: false
  '/GameRoles/{id}/gameProfiles':
    get:
      tags:
        - GameRole
      summary: Queries gameProfiles of GameRole.
      operationId: GameRole.prototype.__get__gameProfiles
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: GameRole id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/GameProfile'
      deprecated: false
    post:
      tags:
        - GameRole
      summary: Creates a new instance in gameProfiles of this model.
      operationId: GameRole.prototype.__create__gameProfiles
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/GameProfile'
        - name: id
          in: path
          description: GameRole id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfile'
      deprecated: false
    delete:
      tags:
        - GameRole
      summary: Deletes all gameProfiles of this model.
      operationId: GameRole.prototype.__delete__gameProfiles
      parameters:
        - name: id
          in: path
          description: GameRole id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/GameRoles/{id}/gameProfiles/count':
    get:
      tags:
        - GameRole
      summary: Counts gameProfiles of GameRole.
      operationId: GameRole.prototype.__count__gameProfiles
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: GameRole id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /GameRoles:
    post:
      tags:
        - GameRole
      summary: Create a new instance of the model and persist it into the data source.
      operationId: GameRole.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GameRole'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameRole'
      deprecated: false
    patch:
      tags:
        - GameRole
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: GameRole.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GameRole'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameRole'
      deprecated: false
    put:
      tags:
        - GameRole
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: GameRole.replaceOrCreate__put_GameRoles
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GameRole'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameRole'
      deprecated: false
    get:
      tags:
        - GameRole
      summary: Find all instances of the model matched by filter from the data source.
      operationId: GameRole.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/GameRole'
      deprecated: false
  /GameRoles/replaceOrCreate:
    post:
      tags:
        - GameRole
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: GameRole.replaceOrCreate__post_GameRoles_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GameRole'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameRole'
      deprecated: false
  /GameRoles/upsertWithWhere:
    post:
      tags:
        - GameRole
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: GameRole.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/GameRole'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameRole'
      deprecated: false
  '/GameRoles/{id}/exists':
    get:
      tags:
        - GameRole
      summary: Check whether a model instance exists in the data source.
      operationId: 'GameRole.exists__get_GameRoles_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/GameRoles/{id}':
    head:
      tags:
        - GameRole
      summary: Check whether a model instance exists in the data source.
      operationId: 'GameRole.exists__head_GameRoles_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - GameRole
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: GameRole.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameRole'
      deprecated: false
    put:
      tags:
        - GameRole
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'GameRole.replaceById__put_GameRoles_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GameRole'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameRole'
      deprecated: false
    delete:
      tags:
        - GameRole
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: GameRole.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - GameRole
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: GameRole.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/GameRole'
        - name: id
          in: path
          description: GameRole id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameRole'
      deprecated: false
  '/GameRoles/{id}/replace':
    post:
      tags:
        - GameRole
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'GameRole.replaceById__post_GameRoles_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GameRole'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameRole'
      deprecated: false
  /GameRoles/findOne:
    get:
      tags:
        - GameRole
      summary: Find first instance of the model matched by filter from the data source.
      operationId: GameRole.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameRole'
      deprecated: false
  /GameRoles/update:
    post:
      tags:
        - GameRole
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: GameRole.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/GameRole'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /GameRoles/count:
    get:
      tags:
        - GameRole
      summary: Count instances of the model matched by where from the data source.
      operationId: GameRole.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /GameRanks:
    post:
      tags:
        - GameRank
      summary: Create a new instance of the model and persist it into the data source.
      operationId: GameRank.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GameRank'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameRank'
      deprecated: false
    patch:
      tags:
        - GameRank
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: GameRank.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GameRank'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameRank'
      deprecated: false
    put:
      tags:
        - GameRank
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: GameRank.replaceOrCreate__put_GameRanks
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GameRank'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameRank'
      deprecated: false
    get:
      tags:
        - GameRank
      summary: Find all instances of the model matched by filter from the data source.
      operationId: GameRank.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/GameRank'
      deprecated: false
  /GameRanks/replaceOrCreate:
    post:
      tags:
        - GameRank
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: GameRank.replaceOrCreate__post_GameRanks_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GameRank'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameRank'
      deprecated: false
  /GameRanks/upsertWithWhere:
    post:
      tags:
        - GameRank
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: GameRank.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/GameRank'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameRank'
      deprecated: false
  '/GameRanks/{id}/exists':
    get:
      tags:
        - GameRank
      summary: Check whether a model instance exists in the data source.
      operationId: 'GameRank.exists__get_GameRanks_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/GameRanks/{id}':
    head:
      tags:
        - GameRank
      summary: Check whether a model instance exists in the data source.
      operationId: 'GameRank.exists__head_GameRanks_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - GameRank
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: GameRank.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameRank'
      deprecated: false
    put:
      tags:
        - GameRank
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'GameRank.replaceById__put_GameRanks_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GameRank'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameRank'
      deprecated: false
    delete:
      tags:
        - GameRank
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: GameRank.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - GameRank
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: GameRank.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/GameRank'
        - name: id
          in: path
          description: GameRank id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameRank'
      deprecated: false
  '/GameRanks/{id}/replace':
    post:
      tags:
        - GameRank
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'GameRank.replaceById__post_GameRanks_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GameRank'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameRank'
      deprecated: false
  /GameRanks/findOne:
    get:
      tags:
        - GameRank
      summary: Find first instance of the model matched by filter from the data source.
      operationId: GameRank.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameRank'
      deprecated: false
  /GameRanks/update:
    post:
      tags:
        - GameRank
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: GameRank.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/GameRank'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /GameRanks/count:
    get:
      tags:
        - GameRank
      summary: Count instances of the model matched by where from the data source.
      operationId: GameRank.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/GameProfiles/{id}/game':
    get:
      tags:
        - GameProfile
      summary: Fetches belongsTo relation game.
      operationId: GameProfile.prototype.__get__game
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: GameProfile id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Game'
      deprecated: false
  '/GameProfiles/{id}/player':
    get:
      tags:
        - GameProfile
      summary: Fetches belongsTo relation player.
      operationId: GameProfile.prototype.__get__player
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: GameProfile id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Player'
      deprecated: false
  '/GameProfiles/{id}/gameRank':
    get:
      tags:
        - GameProfile
      summary: Fetches belongsTo relation gameRank.
      operationId: GameProfile.prototype.__get__gameRank
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: GameProfile id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameRank'
      deprecated: false
  '/GameProfiles/{id}/gameRole':
    get:
      tags:
        - GameProfile
      summary: Fetches belongsTo relation gameRole.
      operationId: GameProfile.prototype.__get__gameRole
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: GameProfile id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameRole'
      deprecated: false
  '/GameProfiles/{id}/gameMode':
    get:
      tags:
        - GameProfile
      summary: Fetches belongsTo relation gameMode.
      operationId: GameProfile.prototype.__get__gameMode
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: GameProfile id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameMode'
      deprecated: false
  '/GameProfiles/{id}/gameRegion':
    get:
      tags:
        - GameProfile
      summary: Fetches belongsTo relation gameRegion.
      operationId: GameProfile.prototype.__get__gameRegion
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: GameProfile id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameRegion'
      deprecated: false
  '/GameProfiles/{id}/gameProfileComments/{fk}':
    get:
      tags:
        - GameProfile
      summary: Find a related item by id for gameProfileComments.
      operationId: GameProfile.prototype.__findById__gameProfileComments
      parameters:
        - name: fk
          in: path
          description: Foreign key for gameProfileComments
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: GameProfile id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfileComment'
      deprecated: false
    delete:
      tags:
        - GameProfile
      summary: Delete a related item by id for gameProfileComments.
      operationId: GameProfile.prototype.__destroyById__gameProfileComments
      parameters:
        - name: fk
          in: path
          description: Foreign key for gameProfileComments
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: GameProfile id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - GameProfile
      summary: Update a related item by id for gameProfileComments.
      operationId: GameProfile.prototype.__updateById__gameProfileComments
      parameters:
        - name: fk
          in: path
          description: Foreign key for gameProfileComments
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/GameProfileComment'
        - name: id
          in: path
          description: GameProfile id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfileComment'
      deprecated: false
  '/GameProfiles/{id}/gameModes/{fk}':
    get:
      tags:
        - GameProfile
      summary: Find a related item by id for gameModes.
      operationId: GameProfile.prototype.__findById__gameModes
      parameters:
        - name: fk
          in: path
          description: Foreign key for gameModes
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: GameProfile id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfileGameMode'
      deprecated: false
    delete:
      tags:
        - GameProfile
      summary: Delete a related item by id for gameModes.
      operationId: GameProfile.prototype.__destroyById__gameModes
      parameters:
        - name: fk
          in: path
          description: Foreign key for gameModes
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: GameProfile id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - GameProfile
      summary: Update a related item by id for gameModes.
      operationId: GameProfile.prototype.__updateById__gameModes
      parameters:
        - name: fk
          in: path
          description: Foreign key for gameModes
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/GameProfileGameMode'
        - name: id
          in: path
          description: GameProfile id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfileGameMode'
      deprecated: false
  '/GameProfiles/{id}/gameRegions/{fk}':
    get:
      tags:
        - GameProfile
      summary: Find a related item by id for gameRegions.
      operationId: GameProfile.prototype.__findById__gameRegions
      parameters:
        - name: fk
          in: path
          description: Foreign key for gameRegions
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: GameProfile id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfileGameRegion'
      deprecated: false
    delete:
      tags:
        - GameProfile
      summary: Delete a related item by id for gameRegions.
      operationId: GameProfile.prototype.__destroyById__gameRegions
      parameters:
        - name: fk
          in: path
          description: Foreign key for gameRegions
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: GameProfile id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - GameProfile
      summary: Update a related item by id for gameRegions.
      operationId: GameProfile.prototype.__updateById__gameRegions
      parameters:
        - name: fk
          in: path
          description: Foreign key for gameRegions
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/GameProfileGameRegion'
        - name: id
          in: path
          description: GameProfile id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfileGameRegion'
      deprecated: false
  '/GameProfiles/{id}/gameRoles/{fk}':
    get:
      tags:
        - GameProfile
      summary: Find a related item by id for gameRoles.
      operationId: GameProfile.prototype.__findById__gameRoles
      parameters:
        - name: fk
          in: path
          description: Foreign key for gameRoles
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: GameProfile id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfileGameRole'
      deprecated: false
    delete:
      tags:
        - GameProfile
      summary: Delete a related item by id for gameRoles.
      operationId: GameProfile.prototype.__destroyById__gameRoles
      parameters:
        - name: fk
          in: path
          description: Foreign key for gameRoles
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: GameProfile id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - GameProfile
      summary: Update a related item by id for gameRoles.
      operationId: GameProfile.prototype.__updateById__gameRoles
      parameters:
        - name: fk
          in: path
          description: Foreign key for gameRoles
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/GameProfileGameRole'
        - name: id
          in: path
          description: GameProfile id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfileGameRole'
      deprecated: false
  '/GameProfiles/{id}/gameProfileComments':
    get:
      tags:
        - GameProfile
      summary: Queries gameProfileComments of GameProfile.
      operationId: GameProfile.prototype.__get__gameProfileComments
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: GameProfile id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/GameProfileComment'
      deprecated: false
    post:
      tags:
        - GameProfile
      summary: Creates a new instance in gameProfileComments of this model.
      operationId: GameProfile.prototype.__create__gameProfileComments
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/GameProfileComment'
        - name: id
          in: path
          description: GameProfile id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfileComment'
      deprecated: false
    delete:
      tags:
        - GameProfile
      summary: Deletes all gameProfileComments of this model.
      operationId: GameProfile.prototype.__delete__gameProfileComments
      parameters:
        - name: id
          in: path
          description: GameProfile id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/GameProfiles/{id}/gameProfileComments/count':
    get:
      tags:
        - GameProfile
      summary: Counts gameProfileComments of GameProfile.
      operationId: GameProfile.prototype.__count__gameProfileComments
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: GameProfile id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/GameProfiles/{id}/gameModes':
    get:
      tags:
        - GameProfile
      summary: Queries gameModes of GameProfile.
      operationId: GameProfile.prototype.__get__gameModes
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: GameProfile id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/GameProfileGameMode'
      deprecated: false
    post:
      tags:
        - GameProfile
      summary: Creates a new instance in gameModes of this model.
      operationId: GameProfile.prototype.__create__gameModes
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/GameProfileGameMode'
        - name: id
          in: path
          description: GameProfile id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfileGameMode'
      deprecated: false
    delete:
      tags:
        - GameProfile
      summary: Deletes all gameModes of this model.
      operationId: GameProfile.prototype.__delete__gameModes
      parameters:
        - name: id
          in: path
          description: GameProfile id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/GameProfiles/{id}/gameModes/count':
    get:
      tags:
        - GameProfile
      summary: Counts gameModes of GameProfile.
      operationId: GameProfile.prototype.__count__gameModes
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: GameProfile id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/GameProfiles/{id}/gameRegions':
    get:
      tags:
        - GameProfile
      summary: Queries gameRegions of GameProfile.
      operationId: GameProfile.prototype.__get__gameRegions
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: GameProfile id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/GameProfileGameRegion'
      deprecated: false
    post:
      tags:
        - GameProfile
      summary: Creates a new instance in gameRegions of this model.
      operationId: GameProfile.prototype.__create__gameRegions
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/GameProfileGameRegion'
        - name: id
          in: path
          description: GameProfile id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfileGameRegion'
      deprecated: false
    delete:
      tags:
        - GameProfile
      summary: Deletes all gameRegions of this model.
      operationId: GameProfile.prototype.__delete__gameRegions
      parameters:
        - name: id
          in: path
          description: GameProfile id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/GameProfiles/{id}/gameRegions/count':
    get:
      tags:
        - GameProfile
      summary: Counts gameRegions of GameProfile.
      operationId: GameProfile.prototype.__count__gameRegions
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: GameProfile id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/GameProfiles/{id}/gameRoles':
    get:
      tags:
        - GameProfile
      summary: Queries gameRoles of GameProfile.
      operationId: GameProfile.prototype.__get__gameRoles
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: GameProfile id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/GameProfileGameRole'
      deprecated: false
    post:
      tags:
        - GameProfile
      summary: Creates a new instance in gameRoles of this model.
      operationId: GameProfile.prototype.__create__gameRoles
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/GameProfileGameRole'
        - name: id
          in: path
          description: GameProfile id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfileGameRole'
      deprecated: false
    delete:
      tags:
        - GameProfile
      summary: Deletes all gameRoles of this model.
      operationId: GameProfile.prototype.__delete__gameRoles
      parameters:
        - name: id
          in: path
          description: GameProfile id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/GameProfiles/{id}/gameRoles/count':
    get:
      tags:
        - GameProfile
      summary: Counts gameRoles of GameProfile.
      operationId: GameProfile.prototype.__count__gameRoles
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: GameProfile id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /GameProfiles:
    post:
      tags:
        - GameProfile
      summary: Create a new instance of the model and persist it into the data source.
      operationId: GameProfile.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GameProfile'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfile'
      deprecated: false
    patch:
      tags:
        - GameProfile
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: GameProfile.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GameProfile'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfile'
      deprecated: false
    put:
      tags:
        - GameProfile
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: GameProfile.replaceOrCreate__put_GameProfiles
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GameProfile'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfile'
      deprecated: false
    get:
      tags:
        - GameProfile
      summary: Find all instances of the model matched by filter from the data source.
      operationId: GameProfile.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/GameProfile'
      deprecated: false
  /GameProfiles/replaceOrCreate:
    post:
      tags:
        - GameProfile
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: GameProfile.replaceOrCreate__post_GameProfiles_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GameProfile'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfile'
      deprecated: false
  /GameProfiles/upsertWithWhere:
    post:
      tags:
        - GameProfile
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: GameProfile.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/GameProfile'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfile'
      deprecated: false
  '/GameProfiles/{id}/exists':
    get:
      tags:
        - GameProfile
      summary: Check whether a model instance exists in the data source.
      operationId: 'GameProfile.exists__get_GameProfiles_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/GameProfiles/{id}':
    head:
      tags:
        - GameProfile
      summary: Check whether a model instance exists in the data source.
      operationId: 'GameProfile.exists__head_GameProfiles_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - GameProfile
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: GameProfile.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfile'
      deprecated: false
    put:
      tags:
        - GameProfile
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'GameProfile.replaceById__put_GameProfiles_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GameProfile'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfile'
      deprecated: false
    delete:
      tags:
        - GameProfile
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: GameProfile.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - GameProfile
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: GameProfile.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/GameProfile'
        - name: id
          in: path
          description: GameProfile id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfile'
      deprecated: false
  '/GameProfiles/{id}/replace':
    post:
      tags:
        - GameProfile
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'GameProfile.replaceById__post_GameProfiles_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GameProfile'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfile'
      deprecated: false
  /GameProfiles/findOne:
    get:
      tags:
        - GameProfile
      summary: Find first instance of the model matched by filter from the data source.
      operationId: GameProfile.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfile'
      deprecated: false
  /GameProfiles/update:
    post:
      tags:
        - GameProfile
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: GameProfile.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/GameProfile'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /GameProfiles/count:
    get:
      tags:
        - GameProfile
      summary: Count instances of the model matched by where from the data source.
      operationId: GameProfile.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /GameProfiles/filterGamerProfiles:
    get:
      tags:
        - GameProfile
      summary: Filter GameProfile Test
      operationId: GameProfile.filterGamerProfiles
      parameters:
        - name: params
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              data:
                type: string
      deprecated: false
  /GameProfiles/updateGameProfile:
    post:
      tags:
        - GameProfile
      summary: Update game profile
      operationId: GameProfile.updateGameProfile
      parameters:
        - name: params
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              data:
                type: string
      deprecated: false
  '/GameRegions/{id}/gameProfiles/{fk}':
    get:
      tags:
        - GameRegion
      summary: Find a related item by id for gameProfiles.
      operationId: GameRegion.prototype.__findById__gameProfiles
      parameters:
        - name: fk
          in: path
          description: Foreign key for gameProfiles
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: GameRegion id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfile'
      deprecated: false
    delete:
      tags:
        - GameRegion
      summary: Delete a related item by id for gameProfiles.
      operationId: GameRegion.prototype.__destroyById__gameProfiles
      parameters:
        - name: fk
          in: path
          description: Foreign key for gameProfiles
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: GameRegion id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - GameRegion
      summary: Update a related item by id for gameProfiles.
      operationId: GameRegion.prototype.__updateById__gameProfiles
      parameters:
        - name: fk
          in: path
          description: Foreign key for gameProfiles
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/GameProfile'
        - name: id
          in: path
          description: GameRegion id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfile'
      deprecated: false
  '/GameRegions/{id}/gameProfiles':
    get:
      tags:
        - GameRegion
      summary: Queries gameProfiles of GameRegion.
      operationId: GameRegion.prototype.__get__gameProfiles
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: GameRegion id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/GameProfile'
      deprecated: false
    post:
      tags:
        - GameRegion
      summary: Creates a new instance in gameProfiles of this model.
      operationId: GameRegion.prototype.__create__gameProfiles
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/GameProfile'
        - name: id
          in: path
          description: GameRegion id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfile'
      deprecated: false
    delete:
      tags:
        - GameRegion
      summary: Deletes all gameProfiles of this model.
      operationId: GameRegion.prototype.__delete__gameProfiles
      parameters:
        - name: id
          in: path
          description: GameRegion id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/GameRegions/{id}/gameProfiles/count':
    get:
      tags:
        - GameRegion
      summary: Counts gameProfiles of GameRegion.
      operationId: GameRegion.prototype.__count__gameProfiles
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: GameRegion id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /GameRegions:
    post:
      tags:
        - GameRegion
      summary: Create a new instance of the model and persist it into the data source.
      operationId: GameRegion.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GameRegion'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameRegion'
      deprecated: false
    patch:
      tags:
        - GameRegion
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: GameRegion.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GameRegion'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameRegion'
      deprecated: false
    put:
      tags:
        - GameRegion
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: GameRegion.replaceOrCreate__put_GameRegions
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GameRegion'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameRegion'
      deprecated: false
    get:
      tags:
        - GameRegion
      summary: Find all instances of the model matched by filter from the data source.
      operationId: GameRegion.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/GameRegion'
      deprecated: false
  /GameRegions/replaceOrCreate:
    post:
      tags:
        - GameRegion
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: GameRegion.replaceOrCreate__post_GameRegions_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GameRegion'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameRegion'
      deprecated: false
  /GameRegions/upsertWithWhere:
    post:
      tags:
        - GameRegion
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: GameRegion.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/GameRegion'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameRegion'
      deprecated: false
  '/GameRegions/{id}/exists':
    get:
      tags:
        - GameRegion
      summary: Check whether a model instance exists in the data source.
      operationId: 'GameRegion.exists__get_GameRegions_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/GameRegions/{id}':
    head:
      tags:
        - GameRegion
      summary: Check whether a model instance exists in the data source.
      operationId: 'GameRegion.exists__head_GameRegions_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - GameRegion
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: GameRegion.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameRegion'
      deprecated: false
    put:
      tags:
        - GameRegion
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'GameRegion.replaceById__put_GameRegions_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GameRegion'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameRegion'
      deprecated: false
    delete:
      tags:
        - GameRegion
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: GameRegion.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - GameRegion
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: GameRegion.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/GameRegion'
        - name: id
          in: path
          description: GameRegion id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameRegion'
      deprecated: false
  '/GameRegions/{id}/replace':
    post:
      tags:
        - GameRegion
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'GameRegion.replaceById__post_GameRegions_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GameRegion'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameRegion'
      deprecated: false
  /GameRegions/findOne:
    get:
      tags:
        - GameRegion
      summary: Find first instance of the model matched by filter from the data source.
      operationId: GameRegion.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameRegion'
      deprecated: false
  /GameRegions/update:
    post:
      tags:
        - GameRegion
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: GameRegion.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/GameRegion'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /GameRegions/count:
    get:
      tags:
        - GameRegion
      summary: Count instances of the model matched by where from the data source.
      operationId: GameRegion.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/GameProfileComments/{id}/player':
    get:
      tags:
        - GameProfileComment
      summary: Fetches belongsTo relation player.
      operationId: GameProfileComment.prototype.__get__player
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: GameProfileComment id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Player'
      deprecated: false
  '/GameProfileComments/{id}/gameProfile':
    get:
      tags:
        - GameProfileComment
      summary: Fetches belongsTo relation gameProfile.
      operationId: GameProfileComment.prototype.__get__gameProfile
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: GameProfileComment id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfile'
      deprecated: false
  /GameProfileComments:
    post:
      tags:
        - GameProfileComment
      summary: Create a new instance of the model and persist it into the data source.
      operationId: GameProfileComment.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GameProfileComment'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfileComment'
      deprecated: false
    patch:
      tags:
        - GameProfileComment
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: GameProfileComment.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GameProfileComment'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfileComment'
      deprecated: false
    put:
      tags:
        - GameProfileComment
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: GameProfileComment.replaceOrCreate__put_GameProfileComments
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GameProfileComment'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfileComment'
      deprecated: false
    get:
      tags:
        - GameProfileComment
      summary: Find all instances of the model matched by filter from the data source.
      operationId: GameProfileComment.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/GameProfileComment'
      deprecated: false
  /GameProfileComments/replaceOrCreate:
    post:
      tags:
        - GameProfileComment
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: GameProfileComment.replaceOrCreate__post_GameProfileComments_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GameProfileComment'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfileComment'
      deprecated: false
  /GameProfileComments/upsertWithWhere:
    post:
      tags:
        - GameProfileComment
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: GameProfileComment.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/GameProfileComment'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfileComment'
      deprecated: false
  '/GameProfileComments/{id}/exists':
    get:
      tags:
        - GameProfileComment
      summary: Check whether a model instance exists in the data source.
      operationId: 'GameProfileComment.exists__get_GameProfileComments_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/GameProfileComments/{id}':
    head:
      tags:
        - GameProfileComment
      summary: Check whether a model instance exists in the data source.
      operationId: 'GameProfileComment.exists__head_GameProfileComments_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - GameProfileComment
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: GameProfileComment.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfileComment'
      deprecated: false
    put:
      tags:
        - GameProfileComment
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'GameProfileComment.replaceById__put_GameProfileComments_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GameProfileComment'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfileComment'
      deprecated: false
    delete:
      tags:
        - GameProfileComment
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: GameProfileComment.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - GameProfileComment
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: GameProfileComment.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/GameProfileComment'
        - name: id
          in: path
          description: GameProfileComment id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfileComment'
      deprecated: false
  '/GameProfileComments/{id}/replace':
    post:
      tags:
        - GameProfileComment
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'GameProfileComment.replaceById__post_GameProfileComments_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GameProfileComment'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfileComment'
      deprecated: false
  /GameProfileComments/findOne:
    get:
      tags:
        - GameProfileComment
      summary: Find first instance of the model matched by filter from the data source.
      operationId: GameProfileComment.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfileComment'
      deprecated: false
  /GameProfileComments/update:
    post:
      tags:
        - GameProfileComment
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: GameProfileComment.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/GameProfileComment'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /GameProfileComments/count:
    get:
      tags:
        - GameProfileComment
      summary: Count instances of the model matched by where from the data source.
      operationId: GameProfileComment.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/GameProfileGameModes/{id}/gameProfile':
    get:
      tags:
        - GameProfileGameMode
      summary: Fetches belongsTo relation gameProfile.
      operationId: GameProfileGameMode.prototype.__get__gameProfile
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: GameProfileGameMode id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfile'
      deprecated: false
  '/GameProfileGameModes/{id}/gameMode':
    get:
      tags:
        - GameProfileGameMode
      summary: Fetches belongsTo relation gameMode.
      operationId: GameProfileGameMode.prototype.__get__gameMode
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: GameProfileGameMode id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameMode'
      deprecated: false
  /GameProfileGameModes:
    post:
      tags:
        - GameProfileGameMode
      summary: Create a new instance of the model and persist it into the data source.
      operationId: GameProfileGameMode.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GameProfileGameMode'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfileGameMode'
      deprecated: false
    patch:
      tags:
        - GameProfileGameMode
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: GameProfileGameMode.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GameProfileGameMode'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfileGameMode'
      deprecated: false
    put:
      tags:
        - GameProfileGameMode
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: GameProfileGameMode.replaceOrCreate__put_GameProfileGameModes
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GameProfileGameMode'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfileGameMode'
      deprecated: false
    get:
      tags:
        - GameProfileGameMode
      summary: Find all instances of the model matched by filter from the data source.
      operationId: GameProfileGameMode.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/GameProfileGameMode'
      deprecated: false
  /GameProfileGameModes/replaceOrCreate:
    post:
      tags:
        - GameProfileGameMode
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: GameProfileGameMode.replaceOrCreate__post_GameProfileGameModes_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GameProfileGameMode'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfileGameMode'
      deprecated: false
  /GameProfileGameModes/upsertWithWhere:
    post:
      tags:
        - GameProfileGameMode
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: GameProfileGameMode.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/GameProfileGameMode'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfileGameMode'
      deprecated: false
  '/GameProfileGameModes/{id}/exists':
    get:
      tags:
        - GameProfileGameMode
      summary: Check whether a model instance exists in the data source.
      operationId: 'GameProfileGameMode.exists__get_GameProfileGameModes_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/GameProfileGameModes/{id}':
    head:
      tags:
        - GameProfileGameMode
      summary: Check whether a model instance exists in the data source.
      operationId: 'GameProfileGameMode.exists__head_GameProfileGameModes_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - GameProfileGameMode
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: GameProfileGameMode.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfileGameMode'
      deprecated: false
    put:
      tags:
        - GameProfileGameMode
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'GameProfileGameMode.replaceById__put_GameProfileGameModes_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GameProfileGameMode'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfileGameMode'
      deprecated: false
    delete:
      tags:
        - GameProfileGameMode
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: GameProfileGameMode.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - GameProfileGameMode
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: GameProfileGameMode.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/GameProfileGameMode'
        - name: id
          in: path
          description: GameProfileGameMode id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfileGameMode'
      deprecated: false
  '/GameProfileGameModes/{id}/replace':
    post:
      tags:
        - GameProfileGameMode
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'GameProfileGameMode.replaceById__post_GameProfileGameModes_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GameProfileGameMode'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfileGameMode'
      deprecated: false
  /GameProfileGameModes/findOne:
    get:
      tags:
        - GameProfileGameMode
      summary: Find first instance of the model matched by filter from the data source.
      operationId: GameProfileGameMode.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfileGameMode'
      deprecated: false
  /GameProfileGameModes/update:
    post:
      tags:
        - GameProfileGameMode
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: GameProfileGameMode.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/GameProfileGameMode'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /GameProfileGameModes/count:
    get:
      tags:
        - GameProfileGameMode
      summary: Count instances of the model matched by where from the data source.
      operationId: GameProfileGameMode.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/GameProfileGameRegions/{id}/gameProfile':
    get:
      tags:
        - GameProfileGameRegion
      summary: Fetches belongsTo relation gameProfile.
      operationId: GameProfileGameRegion.prototype.__get__gameProfile
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: GameProfileGameRegion id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfile'
      deprecated: false
  '/GameProfileGameRegions/{id}/gameRegion':
    get:
      tags:
        - GameProfileGameRegion
      summary: Fetches belongsTo relation gameRegion.
      operationId: GameProfileGameRegion.prototype.__get__gameRegion
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: GameProfileGameRegion id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameRegion'
      deprecated: false
  /GameProfileGameRegions:
    post:
      tags:
        - GameProfileGameRegion
      summary: Create a new instance of the model and persist it into the data source.
      operationId: GameProfileGameRegion.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GameProfileGameRegion'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfileGameRegion'
      deprecated: false
    patch:
      tags:
        - GameProfileGameRegion
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: GameProfileGameRegion.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GameProfileGameRegion'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfileGameRegion'
      deprecated: false
    put:
      tags:
        - GameProfileGameRegion
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: GameProfileGameRegion.replaceOrCreate__put_GameProfileGameRegions
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GameProfileGameRegion'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfileGameRegion'
      deprecated: false
    get:
      tags:
        - GameProfileGameRegion
      summary: Find all instances of the model matched by filter from the data source.
      operationId: GameProfileGameRegion.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/GameProfileGameRegion'
      deprecated: false
  /GameProfileGameRegions/replaceOrCreate:
    post:
      tags:
        - GameProfileGameRegion
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: GameProfileGameRegion.replaceOrCreate__post_GameProfileGameRegions_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GameProfileGameRegion'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfileGameRegion'
      deprecated: false
  /GameProfileGameRegions/upsertWithWhere:
    post:
      tags:
        - GameProfileGameRegion
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: GameProfileGameRegion.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/GameProfileGameRegion'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfileGameRegion'
      deprecated: false
  '/GameProfileGameRegions/{id}/exists':
    get:
      tags:
        - GameProfileGameRegion
      summary: Check whether a model instance exists in the data source.
      operationId: 'GameProfileGameRegion.exists__get_GameProfileGameRegions_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/GameProfileGameRegions/{id}':
    head:
      tags:
        - GameProfileGameRegion
      summary: Check whether a model instance exists in the data source.
      operationId: 'GameProfileGameRegion.exists__head_GameProfileGameRegions_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - GameProfileGameRegion
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: GameProfileGameRegion.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfileGameRegion'
      deprecated: false
    put:
      tags:
        - GameProfileGameRegion
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'GameProfileGameRegion.replaceById__put_GameProfileGameRegions_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GameProfileGameRegion'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfileGameRegion'
      deprecated: false
    delete:
      tags:
        - GameProfileGameRegion
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: GameProfileGameRegion.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - GameProfileGameRegion
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: GameProfileGameRegion.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/GameProfileGameRegion'
        - name: id
          in: path
          description: GameProfileGameRegion id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfileGameRegion'
      deprecated: false
  '/GameProfileGameRegions/{id}/replace':
    post:
      tags:
        - GameProfileGameRegion
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'GameProfileGameRegion.replaceById__post_GameProfileGameRegions_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GameProfileGameRegion'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfileGameRegion'
      deprecated: false
  /GameProfileGameRegions/findOne:
    get:
      tags:
        - GameProfileGameRegion
      summary: Find first instance of the model matched by filter from the data source.
      operationId: GameProfileGameRegion.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfileGameRegion'
      deprecated: false
  /GameProfileGameRegions/update:
    post:
      tags:
        - GameProfileGameRegion
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: GameProfileGameRegion.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/GameProfileGameRegion'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /GameProfileGameRegions/count:
    get:
      tags:
        - GameProfileGameRegion
      summary: Count instances of the model matched by where from the data source.
      operationId: GameProfileGameRegion.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/GameProfileGameRoles/{id}/gameProfile':
    get:
      tags:
        - GameProfileGameRole
      summary: Fetches belongsTo relation gameProfile.
      operationId: GameProfileGameRole.prototype.__get__gameProfile
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: GameProfileGameRole id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfile'
      deprecated: false
  '/GameProfileGameRoles/{id}/gameRole':
    get:
      tags:
        - GameProfileGameRole
      summary: Fetches belongsTo relation gameRole.
      operationId: GameProfileGameRole.prototype.__get__gameRole
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: GameProfileGameRole id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameRole'
      deprecated: false
  /GameProfileGameRoles:
    post:
      tags:
        - GameProfileGameRole
      summary: Create a new instance of the model and persist it into the data source.
      operationId: GameProfileGameRole.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GameProfileGameRole'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfileGameRole'
      deprecated: false
    patch:
      tags:
        - GameProfileGameRole
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: GameProfileGameRole.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GameProfileGameRole'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfileGameRole'
      deprecated: false
    put:
      tags:
        - GameProfileGameRole
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: GameProfileGameRole.replaceOrCreate__put_GameProfileGameRoles
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GameProfileGameRole'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfileGameRole'
      deprecated: false
    get:
      tags:
        - GameProfileGameRole
      summary: Find all instances of the model matched by filter from the data source.
      operationId: GameProfileGameRole.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/GameProfileGameRole'
      deprecated: false
  /GameProfileGameRoles/replaceOrCreate:
    post:
      tags:
        - GameProfileGameRole
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: GameProfileGameRole.replaceOrCreate__post_GameProfileGameRoles_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GameProfileGameRole'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfileGameRole'
      deprecated: false
  /GameProfileGameRoles/upsertWithWhere:
    post:
      tags:
        - GameProfileGameRole
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: GameProfileGameRole.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/GameProfileGameRole'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfileGameRole'
      deprecated: false
  '/GameProfileGameRoles/{id}/exists':
    get:
      tags:
        - GameProfileGameRole
      summary: Check whether a model instance exists in the data source.
      operationId: 'GameProfileGameRole.exists__get_GameProfileGameRoles_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/GameProfileGameRoles/{id}':
    head:
      tags:
        - GameProfileGameRole
      summary: Check whether a model instance exists in the data source.
      operationId: 'GameProfileGameRole.exists__head_GameProfileGameRoles_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - GameProfileGameRole
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: GameProfileGameRole.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfileGameRole'
      deprecated: false
    put:
      tags:
        - GameProfileGameRole
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'GameProfileGameRole.replaceById__put_GameProfileGameRoles_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GameProfileGameRole'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfileGameRole'
      deprecated: false
    delete:
      tags:
        - GameProfileGameRole
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: GameProfileGameRole.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - GameProfileGameRole
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: GameProfileGameRole.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/GameProfileGameRole'
        - name: id
          in: path
          description: GameProfileGameRole id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfileGameRole'
      deprecated: false
  '/GameProfileGameRoles/{id}/replace':
    post:
      tags:
        - GameProfileGameRole
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'GameProfileGameRole.replaceById__post_GameProfileGameRoles_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GameProfileGameRole'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfileGameRole'
      deprecated: false
  /GameProfileGameRoles/findOne:
    get:
      tags:
        - GameProfileGameRole
      summary: Find first instance of the model matched by filter from the data source.
      operationId: GameProfileGameRole.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameProfileGameRole'
      deprecated: false
  /GameProfileGameRoles/update:
    post:
      tags:
        - GameProfileGameRole
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: GameProfileGameRole.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/GameProfileGameRole'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /GameProfileGameRoles/count:
    get:
      tags:
        - GameProfileGameRole
      summary: Count instances of the model matched by where from the data source.
      operationId: GameProfileGameRole.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/PlayerLanguages/{id}/player':
    get:
      tags:
        - PlayerLanguage
      summary: Fetches belongsTo relation player.
      operationId: PlayerLanguage.prototype.__get__player
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: PlayerLanguage id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Player'
      deprecated: false
  '/PlayerLanguages/{id}/language':
    get:
      tags:
        - PlayerLanguage
      summary: Fetches belongsTo relation language.
      operationId: PlayerLanguage.prototype.__get__language
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: PlayerLanguage id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Language'
      deprecated: false
  /PlayerLanguages:
    post:
      tags:
        - PlayerLanguage
      summary: Create a new instance of the model and persist it into the data source.
      operationId: PlayerLanguage.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/PlayerLanguage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PlayerLanguage'
      deprecated: false
    patch:
      tags:
        - PlayerLanguage
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: PlayerLanguage.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/PlayerLanguage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PlayerLanguage'
      deprecated: false
    put:
      tags:
        - PlayerLanguage
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: PlayerLanguage.replaceOrCreate__put_PlayerLanguages
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/PlayerLanguage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PlayerLanguage'
      deprecated: false
    get:
      tags:
        - PlayerLanguage
      summary: Find all instances of the model matched by filter from the data source.
      operationId: PlayerLanguage.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/PlayerLanguage'
      deprecated: false
  /PlayerLanguages/replaceOrCreate:
    post:
      tags:
        - PlayerLanguage
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: PlayerLanguage.replaceOrCreate__post_PlayerLanguages_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/PlayerLanguage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PlayerLanguage'
      deprecated: false
  /PlayerLanguages/upsertWithWhere:
    post:
      tags:
        - PlayerLanguage
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: PlayerLanguage.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/PlayerLanguage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PlayerLanguage'
      deprecated: false
  '/PlayerLanguages/{id}/exists':
    get:
      tags:
        - PlayerLanguage
      summary: Check whether a model instance exists in the data source.
      operationId: 'PlayerLanguage.exists__get_PlayerLanguages_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/PlayerLanguages/{id}':
    head:
      tags:
        - PlayerLanguage
      summary: Check whether a model instance exists in the data source.
      operationId: 'PlayerLanguage.exists__head_PlayerLanguages_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - PlayerLanguage
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: PlayerLanguage.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PlayerLanguage'
      deprecated: false
    put:
      tags:
        - PlayerLanguage
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'PlayerLanguage.replaceById__put_PlayerLanguages_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/PlayerLanguage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PlayerLanguage'
      deprecated: false
    delete:
      tags:
        - PlayerLanguage
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: PlayerLanguage.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - PlayerLanguage
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: PlayerLanguage.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/PlayerLanguage'
        - name: id
          in: path
          description: PlayerLanguage id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PlayerLanguage'
      deprecated: false
  '/PlayerLanguages/{id}/replace':
    post:
      tags:
        - PlayerLanguage
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'PlayerLanguage.replaceById__post_PlayerLanguages_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/PlayerLanguage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PlayerLanguage'
      deprecated: false
  /PlayerLanguages/findOne:
    get:
      tags:
        - PlayerLanguage
      summary: Find first instance of the model matched by filter from the data source.
      operationId: PlayerLanguage.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PlayerLanguage'
      deprecated: false
  /PlayerLanguages/update:
    post:
      tags:
        - PlayerLanguage
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: PlayerLanguage.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/PlayerLanguage'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /PlayerLanguages/count:
    get:
      tags:
        - PlayerLanguage
      summary: Count instances of the model matched by where from the data source.
      operationId: PlayerLanguage.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
definitions:
  x-any:
    properties: {}
  AccessToken:
    properties:
      id:
        type: string
      ttl:
        default: 1209600
        description: time to live in seconds (2 weeks by default)
        type: number
        format: double
      scopes:
        description: Array of scopes granted to this access token.
        type: array
        items:
          type: string
      created:
        type: string
        format: date-time
      userId:
        type: number
        format: double
    required:
      - id
    additionalProperties: false
  User:
    properties:
      realm:
        type: string
      username:
        type: string
      email:
        type: string
      emailVerified:
        type: boolean
      id:
        type: number
        format: double
    required:
      - email
    additionalProperties: false
  Language:
    properties:
      label:
        type: string
      iso639-1:
        type: string
      value:
        type: string
      id:
        type: number
        format: double
    required:
      - label
      - iso639-1
      - value
    additionalProperties: false
  Country:
    properties:
      code:
        type: string
      label:
        type: string
      id:
        type: number
        format: double
    required:
      - code
      - label
    additionalProperties: false
  GameProfile:
    properties:
      isActive:
        default: true
        type: boolean
      experience:
        type: string
      availability:
        type: string
      contactLink:
        type: string
      id:
        type: number
        format: double
      gameId:
        type: number
        format: double
      playerId:
        type: number
        format: double
      gameRankId:
        type: number
        format: double
      gameRoleId:
        type: number
        format: double
      gameModeId:
        type: number
        format: double
      gameRegionId:
        type: number
        format: double
    required:
      - isActive
    additionalProperties: false
  PlayerLanguage:
    properties:
      id:
        type: number
        format: double
      playerId:
        type: number
        format: double
      languageId:
        type: number
        format: double
    additionalProperties: false
  Player:
    properties:
      gender:
        type: string
      birthday:
        type: string
        format: date-time
      role:
        type: string
      biography:
        type: string
      isBaned:
        type: boolean
      realm:
        type: string
      username:
        type: string
      email:
        type: string
      emailVerified:
        type: boolean
      id:
        type: number
        format: double
      languageId:
        type: number
        format: double
      countryId:
        type: number
        format: double
    required:
      - email
    additionalProperties: false
  GameRole:
    properties:
      label:
        type: string
      value:
        type: string
      order:
        type: number
        format: double
      id:
        type: number
        format: double
      gameId:
        type: number
        format: double
    required:
      - label
      - value
    additionalProperties: false
  GameRank:
    properties:
      label:
        type: string
      value:
        type: string
      from:
        type: number
        format: double
      to:
        type: number
        format: double
      id:
        type: number
        format: double
      gameId:
        type: number
        format: double
    required:
      - label
      - value
    additionalProperties: false
  GameMode:
    properties:
      label:
        type: string
      value:
        type: string
      id:
        type: number
        format: double
      gameId:
        type: number
        format: double
    required:
      - label
      - value
    additionalProperties: false
  GameRegion:
    properties:
      label:
        type: string
      value:
        type: string
      id:
        type: number
        format: double
      gameId:
        type: number
        format: double
    required:
      - label
      - value
    additionalProperties: false
  Game:
    properties:
      name:
        type: string
      genre:
        type: string
      shortName:
        type: string
      id:
        type: number
        format: double
    required:
      - name
      - genre
      - shortName
    additionalProperties: false
  GameProfileComment:
    properties:
      text:
        type: string
      date:
        default: $now
        type: string
        format: date-time
      id:
        type: number
        format: double
      playerId:
        type: number
        format: double
      gameProfileId:
        type: number
        format: double
    required:
      - text
    additionalProperties: false
  GameProfileGameMode:
    properties:
      id:
        type: number
        format: double
      gameProfileId:
        type: number
        format: double
      gameModeId:
        type: number
        format: double
    additionalProperties: false
  GameProfileGameRegion:
    properties:
      id:
        type: number
        format: double
      gameProfileId:
        type: number
        format: double
      gameRegionId:
        type: number
        format: double
    additionalProperties: false
  GameProfileGameRole:
    properties:
      id:
        type: number
        format: double
      gameProfileId:
        type: number
        format: double
      gameRoleId:
        type: number
        format: double
    additionalProperties: false
basePath: /api
swagger: '2.0'
info:
  x-ibm-name: mateaddme-api
  version: 1.0.0
  title: mateAddMe-api
schemes:
  - https
host: $(catalog.host)
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  clientIdHeader:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
  clientSecretHeader:
    in: header
    name: X-IBM-Client-Secret
    type: apiKey
security:
  - clientIdHeader: []
    clientSecretHeader: []
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  catalogs:
    apic-dev:
      properties:
        runtime-url: $(TARGET_URL)
    sb:
      properties:
        runtime-url: 'http://localhost:4001'
  assembly:
    execute:
      - invoke:
          target-url: $(runtime-url)$(request.path)$(request.search)
